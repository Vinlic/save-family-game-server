{"version":3,"sources":["../src/lib/environment.ts","../src/lib/configs/service-config.ts","../src/lib/util.ts","../src/lib/http-status-codes.ts","../src/lib/configs/system-config.ts","../src/lib/configs/api-config.ts","../src/lib/configs/redis-config.ts","../src/lib/config.ts","../src/lib/logger.ts","../src/lib/initialize.ts","../src/lib/server.ts","../src/lib/exceptions/Exception.ts","../src/lib/request/Request.ts","../src/lib/exceptions/APIException.ts","../src/api/consts/exceptions.ts","../src/lib/response/Response.ts","../src/lib/response/Body.ts","../src/lib/response/FailureBody.ts","../src/lib/consts/exceptions.ts","../src/api/controllers/conversation.ts","../src/api/controllers/user.ts","../src/api/models/user.ts","../src/lib/redis.ts","../src/api/routes/conversation.ts","../src/api/routes/user.ts","../src/api/routes/index.ts","../src/index.ts"],"sourcesContent":["import path from 'path';\r\n\r\nimport fs from 'fs-extra';\r\nimport minimist from 'minimist';\r\nimport _ from 'lodash';\r\n\r\nconst cmdArgs = minimist(process.argv.slice(2));  //获取命令行参数\r\nconst envVars = process.env;  //获取环境变量\r\n\r\nclass Environment {\r\n\r\n    /** 命令行参数 */\r\n    cmdArgs: any;\r\n    /** 环境变量 */\r\n    envVars: any;\r\n    /** 环境名称 */\r\n    env: string;\r\n    /** 服务名称 */\r\n    name: string;\r\n    /** 服务地址 */\r\n    host: string;\r\n    /** 服务端口 */\r\n    port: number;\r\n    /** 包参数 */\r\n    package: any;\r\n\r\n    constructor(options: any = {}) {\r\n        const { cmdArgs, envVars, package: _package } = options;\r\n        this.cmdArgs = cmdArgs;\r\n        this.envVars = envVars;\r\n        this.env = _.defaultTo(cmdArgs.env || envVars.GAME_SERVER_ENV, 'dev');\r\n        this.name = _.defaultTo(cmdArgs.name || envVars.GAME_SERVER_NAME, 'game-server');\r\n        this.host = _.defaultTo(cmdArgs.host || envVars.GAME_SERVER_HOST, '0.0.0.0');\r\n        this.port = Number(_.defaultTo(cmdArgs.port || envVars.GAME_SERVER_PORT, 5566));\r\n        this.package = _package;\r\n    }\r\n\r\n}\r\n\r\nexport default new Environment({\r\n    cmdArgs,\r\n    envVars,\r\n    package: JSON.parse(fs.readFileSync(path.join(path.resolve(), \"package.json\")).toString())\r\n});","import path from 'path';\r\n\r\nimport fs from 'fs-extra';\r\nimport yaml from 'yaml';\r\nimport _ from 'lodash';\r\n\r\nimport environment from '../environment.ts';\r\nimport util from '../util.ts';\r\n\r\nconst CONFIG_PATH = path.join(path.resolve(), 'configs/', environment.env, \"/service.yml\");\r\n\r\n/**\r\n * 服务配置\r\n */\r\nexport class ServiceConfig {\r\n\r\n    /** 服务名称 */\r\n    name: string;\r\n    /** @type {string} 服务绑定主机地址 */\r\n    host;\r\n    /** @type {number} 服务绑定端口 */\r\n    port;\r\n    /** @type {string} 服务路由前缀 */\r\n    urlPrefix;\r\n    /** @type {string} 服务绑定地址（外部访问地址） */\r\n    bindAddress;\r\n\r\n    constructor(options?: any) {\r\n        const { name, host, port, urlPrefix, bindAddress } = options || {};\r\n        this.name = _.defaultTo(name, 'game-server');\r\n        this.host = _.defaultTo(host, '0.0.0.0');\r\n        this.port = _.defaultTo(port, 5566);\r\n        this.urlPrefix = _.defaultTo(urlPrefix, '');\r\n        this.bindAddress = bindAddress;\r\n    }\r\n\r\n    get addressHost() {\r\n        if(this.bindAddress) return this.bindAddress;\r\n        const ipAddresses = util.getIPAddressesByIPv4();\r\n        for(let ipAddress of ipAddresses) {\r\n            if(ipAddress === this.host)\r\n                return ipAddress;\r\n        }\r\n        return ipAddresses[0] || \"127.0.0.1\";\r\n    }\r\n\r\n    get address() {\r\n        return `${this.addressHost}:${this.port}`;\r\n    }\r\n\r\n    get pageDirUrl() {\r\n        return `http://127.0.0.1:${this.port}/page`;\r\n    }\r\n\r\n    get publicDirUrl() {\r\n        return `http://127.0.0.1:${this.port}/public`;\r\n    }\r\n\r\n    static load() {\r\n        const external = _.pickBy(environment, (v, k) => [\"name\", \"host\", \"port\"].includes(k) && !_.isUndefined(v));\r\n        if(!fs.pathExistsSync(CONFIG_PATH)) return new ServiceConfig(external);\r\n        const data = yaml.parse(fs.readFileSync(CONFIG_PATH).toString());\r\n        return new ServiceConfig({ ...data, ...external });\r\n    }\r\n\r\n}\r\n\r\nexport default ServiceConfig.load();","import os from 'os';\r\nimport path from 'path';\r\nimport crypto from 'crypto';\r\nimport { Readable, Writable } from 'stream';\r\n\r\nimport 'colors';\r\nimport mime from 'mime';\r\nimport fs from 'fs-extra';\r\nimport { v1 as uuid } from 'uuid';\r\nimport { format as dateFormat } from 'date-fns';\r\nimport CRC32 from 'crc-32';\r\nimport randomstring from 'randomstring';\r\nimport _ from 'lodash';\r\nimport { CronJob } from 'cron';\r\nimport { SocksProxyAgent } from 'socks-proxy-agent';\r\nimport { HttpsProxyAgent } from 'https-proxy-agent';\r\n\r\nimport type { ProxyAgent } from './configs/api-config.ts';\r\nimport HTTP_STATUS_CODE from './http-status-codes.ts';\r\n\r\nconst LOGO_TEXT = Buffer.from(\"ICAgX19fX19fXyBfICAgX19fX19fICBfX19fX19fICAgX18gIF9fX19fX19fX19fICBfXwogIC8gX18vIF8gfCB8IC8gLyBfXy8gLyBfXy8gXyB8IC8gIHwvICAvICBfLyAvXCBcLyAvCiBfXCBcLyBfXyB8IHwvIC8gXy8gIC8gXy8vIF9fIHwvIC98Xy8gLy8gLy8gL19fXCAgLyAKL19fXy9fLyB8X3xfX18vX19fLyAvXy8gL18vIHxfL18vICAvXy9fX18vX19fXy8vXy8gIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg\", \"base64\").toString();\r\n\r\nconst autoIdMap = new Map();\r\n\r\nconst util = {\r\n\r\n    is2DArrays(value: any) {\r\n        return _.isArray(value) && (!value[0] || (_.isArray(value[0]) && _.isArray(value[value.length - 1])));\r\n    },\r\n\r\n    uuid: (separator = true) => separator ? uuid() : uuid().replace(/\\-/g, \"\"),\r\n\r\n    autoId: (prefix = '') => {\r\n        let index = autoIdMap.get(prefix);\r\n        if(index > 999999) index = 0;  //超过最大数字则重置为0\r\n        autoIdMap.set(prefix, (index || 0) + 1);\r\n        return `${prefix}${index || 1}`;\r\n    },\r\n\r\n    ignoreJSONParse(value: string) {\r\n        const result = _.attempt(() => JSON.parse(value));\r\n        if(_.isError(result))\r\n            return null;\r\n        return result;\r\n    },\r\n\r\n    generateRandomString(options: any): string {\r\n        return randomstring.generate(options);\r\n    },\r\n\r\n    getResponseContentType(value: any): string | null {\r\n        return value.headers ? (value.headers[\"content-type\"] || value.headers[\"Content-Type\"]) : null;\r\n    },\r\n\r\n    mimeToExtension(value: string) {\r\n        let extension = mime.getExtension(value);\r\n        if(extension == \"mpga\")\r\n            return \"mp3\";\r\n        return extension;\r\n    },\r\n\r\n    extractURLExtension(value: string) {\r\n        const extname = path.extname(new URL(value).pathname);\r\n        return extname.substring(1).toLowerCase();\r\n    },\r\n\r\n    createCronJob(cronPatterns: any, callback?: Function) {\r\n        if(!_.isFunction(callback)) throw new Error(\"callback must be an Function\");\r\n        return new CronJob(cronPatterns, () => callback(), null, false, \"Asia/Shanghai\");\r\n    },\r\n\r\n    createProxyAgent(options: ProxyAgent) {\r\n        const { enable, protocol, host, port } = options;\r\n        if(enable === false)\r\n            return null;\r\n        switch(protocol) {\r\n            case \"socks5\":\r\n                return new SocksProxyAgent(`${protocol}://${host}:${port}`);\r\n            case \"http\":    \r\n            case \"https\":\r\n                return new HttpsProxyAgent(`${protocol}://${host}:${port}`);\r\n            default:\r\n                throw new Error(`protocol ${protocol} is not supported`);\r\n        }\r\n    },\r\n\r\n    getDateString(format = \"yyyy-MM-dd\", date = new Date()) {\r\n        return dateFormat(date, format);\r\n    },\r\n\r\n    getIPAddressesByIPv4(): string[] {\r\n        const interfaces = os.networkInterfaces();\r\n        const addresses = [];\r\n        for (let name in interfaces) {\r\n            const networks = interfaces[name];\r\n            const results = networks.filter(network => network.family === \"IPv4\" && network.address !== \"127.0.0.1\" && !network.internal);\r\n            if (results[0] && results[0].address)\r\n                addresses.push(results[0].address);\r\n        }\r\n        return addresses;\r\n    },\r\n\r\n    getMACAddressesByIPv4(): string[] {\r\n        const interfaces = os.networkInterfaces();\r\n        const addresses = [];\r\n        for (let name in interfaces) {\r\n            const networks = interfaces[name];\r\n            const results = networks.filter(network => network.family === \"IPv4\" && network.address !== \"127.0.0.1\" && !network.internal);\r\n            if (results[0] && results[0].mac)\r\n                addresses.push(results[0].mac);\r\n        }\r\n        return addresses;\r\n    },\r\n\r\n    buildDataBASE64(type, ext, buffer) {\r\n        return `data:${type}/${ext.replace(\"jpg\", \"jpeg\")};base64,${buffer.toString(\"base64\")}`;\r\n    },\r\n\r\n    isLinux() {\r\n        return os.platform() !== \"win32\";\r\n    },\r\n    \r\n    isIPAddress(value) {\r\n        return _.isString(value) && (/^((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)$/.test(value) || /\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*/.test(value));\r\n    },\r\n\r\n    isPort(value) {\r\n        return _.isNumber(value) && value > 0 && value < 65536;\r\n    },\r\n\r\n    isReadStream(value): boolean {\r\n        return value && (value instanceof Readable || \"readable\" in value || value.readable);\r\n    },\r\n\r\n    isWriteStream(value): boolean {\r\n        return value && (value instanceof Writable || \"writable\" in value || value.writable);\r\n    },\r\n\r\n    isHttpStatusCode(value) {\r\n        return _.isNumber(value) && Object.values(HTTP_STATUS_CODE).includes(value);\r\n    },\r\n\r\n    isURL(value) {\r\n        return !_.isUndefined(value) && /^(http|https)/.test(value);\r\n    },\r\n\r\n    isSrc(value) {\r\n        return !_.isUndefined(value) && /^\\/.+\\.[0-9a-zA-Z]+(\\?.+)?$/.test(value);\r\n    },\r\n\r\n    isBASE64(value) {\r\n        return !_.isUndefined(value) && /^[a-zA-Z0-9\\/\\+]+(=?)+$/.test(value);\r\n    },\r\n\r\n    isBASE64Image(value) {\r\n        return /^data:image/.test(value);\r\n    },\r\n\r\n    extractBASE64ImageFormat(value): string | null {\r\n        const match = value.trim().match(/^data:image\\/(.+);base64,/);\r\n        if(!match) return null;\r\n        return match[1];\r\n    },\r\n\r\n    removeBASE64ImageHeader(value): string {\r\n        return value.replace(/^data:image\\/(.+);base64,/, \"\");\r\n    },\r\n\r\n    isDataString(value): boolean {\r\n        return /^(base64|json):/.test(value);\r\n    },\r\n\r\n    isStringNumber(value) {\r\n        return _.isFinite(Number(value));\r\n    },\r\n\r\n    isUnixTimestamp(value) {\r\n        return /^[0-9]{10}$/.test(`${value}`);\r\n    },\r\n\r\n    isTimestamp(value) {\r\n        return /^[0-9]{13}$/.test(`${value}`);\r\n    },\r\n\r\n    isEmail(value) {\r\n        return /^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}$/.test(value);\r\n    },\r\n\r\n    isAsyncFunction(value) {\r\n        return Object.prototype.toString.call(value) === \"[object AsyncFunction]\";\r\n    },\r\n\r\n    async isAPNG(filePath) {\r\n        let head;\r\n        const readStream = fs.createReadStream(filePath, { start: 37, end: 40 });\r\n        const readPromise = new Promise((resolve, reject) => {\r\n            readStream.once(\"end\", resolve);\r\n            readStream.once(\"error\", reject);\r\n        });\r\n        readStream.once(\"data\", data => head = data);\r\n        await readPromise;\r\n        return head.compare(Buffer.from([0x61, 0x63, 0x54, 0x4c])) === 0;\r\n    },\r\n\r\n    unixTimestamp() {\r\n        return parseInt(`${Date.now() / 1000}`);\r\n    },\r\n\r\n    timestamp() {\r\n        return Date.now();\r\n    },\r\n\r\n    urlJoin(...values) {\r\n        let url = \"\";\r\n        for (let i = 0; i < values.length; i++)\r\n            url += `${i > 0 ? \"/\" : \"\"}${values[i].replace(/^\\/*/, \"\").replace(/\\/*$/, \"\")}`;\r\n        return url;\r\n    },\r\n\r\n    millisecondsToHmss(milliseconds) {\r\n        if (_.isString(milliseconds)) return milliseconds;\r\n        milliseconds = parseInt(milliseconds);\r\n        const sec = Math.floor(milliseconds / 1000);\r\n        const hours = Math.floor(sec / 3600);\r\n        const minutes = Math.floor((sec - hours * 3600) / 60);\r\n        const seconds = sec - hours * 3600 - minutes * 60;\r\n        const ms = milliseconds % 60000 - seconds * 1000;\r\n        return `${hours > 9 ? hours : \"0\" + hours}:${minutes > 9 ? minutes : \"0\" + minutes}:${seconds > 9 ? seconds : \"0\" + seconds}.${ms}`;\r\n    },\r\n\r\n    millisecondsToTimeString(milliseconds) {\r\n        if(milliseconds < 1000)\r\n            return `${milliseconds}ms`;\r\n        if(milliseconds < 60000)\r\n            return `${parseFloat((milliseconds / 1000).toFixed(2))}s`;\r\n        return `${Math.floor(milliseconds / 1000 / 60)}m${Math.floor(milliseconds / 1000 % 60)}s`;\r\n    },\r\n\r\n    rgbToHex(r, g, b): string {\r\n        return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);\r\n    },\r\n\r\n    hexToRgb(hex) {\r\n        const value = parseInt(hex.replace(/^#/, \"\"), 16);\r\n        return [(value >> 16) & 255, (value >> 8) & 255, value & 255];\r\n    },\r\n\r\n    md5(value) {\r\n        return crypto.createHash(\"md5\").update(value).digest(\"hex\");\r\n    },\r\n\r\n    crc32(value) {\r\n        return _.isBuffer(value) ? CRC32.buf(value) : CRC32.str(value);\r\n    },\r\n\r\n    arrayParse(value): any[] {\r\n        return _.isArray(value) ? value : [value];\r\n    },\r\n\r\n    printLogo() {\r\n        console.log(LOGO_TEXT['brightBlue']);\r\n    },\r\n\r\n    booleanParse(value) {\r\n        return value === \"true\" || value === true ? true : false\r\n    },\r\n\r\n    encodeBASE64(value) {\r\n        return Buffer.from(value).toString(\"base64\");\r\n    },\r\n\r\n    decodeBASE64(value) {\r\n        return Buffer.from(value, \"base64\").toString();\r\n    },\r\n\r\n};\r\n\r\nexport default util;","export default {\r\n\r\n    CONTINUE: 100,  //客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应\r\n    SWITCHING_PROTOCOLS: 101,  //服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源\r\n    PROCESSING: 102,  //处理将被继续执行\r\n\r\n    OK: 200,  //请求已成功，请求所希望的响应头或数据体将随此响应返回\r\n    CREATED: 201,  //请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 '202 Accepted'\r\n    ACCEPTED: 202,  //服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成\r\n    NON_AUTHORITATIVE_INFO: 203,  //服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超级。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的\r\n    NO_CONTENT: 204,  //服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾\r\n    RESET_CONTENT: 205,  //服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束\r\n    PARTIAL_CONTENT: 206,  //服务器已经成功处理了部分 GET 请求。类似于FlashGet或者迅雷这类的HTTP下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。响应必须包含如下的头部域：Content-Range 用以指示本次响应中返回的内容的范围；如果是Content-Type为multipart/byteranges的多段下载，则每一段multipart中都应包含Content-Range域用以指示本段的内容范围。假如响应中包含Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。Date和ETag或Content-Location，假如同样的请求本应该返回200响应。Expires, Cache-Control，和/或 Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。假如本响应请求使用了 If-Range 强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了 If-Range 弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。假如 ETag 或 Latest-Modified 头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。任何不支持 Range 以及 Content-Range 头的缓存都禁止缓存206响应返回的内容\r\n    MULTIPLE_STATUS: 207,  //代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码\r\n\r\n    MULTIPLE_CHOICES: 300,  //被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。除非这是一个HEAD请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由Content-Type定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。如果服务器本身已经有了首选的回馈选择，那么在Location中应当指明这个回馈的 URI；浏览器可能会将这个 Location 值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的\r\n    MOVED_PERMANENTLY: 301,  //被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个URI之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。新的永久性的URI应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。如果这不是一个GET或者HEAD请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。注意：对于某些使用 HTTP/1.0 协议的浏览器，当它们发送的POST请求得到了一个301响应的话，接下来的重定向请求将会变成GET方式\r\n    FOUND: 302,  //请求的资源现在临时从不同的URI响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。新的临时性的URI应当在响应的 Location 域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用GET方式访问在Location中规定的URI，而无视原先请求的方法。状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应\r\n    SEE_OTHER: 303,  //对应当前请求的响应可以在另一个URI上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的 URI 不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。新的 URI 应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI的超链接及简短说明。注意：许多 HTTP/1.1 版以前的浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的\r\n    NOT_MODIFIED: 304,  //如果客户端发送了一个带条件的GET请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。该响应必须包含以下的头信息：Date，除非这个服务器没有时钟。假如没有时钟的服务器也遵守这些规则，那么代理服务器以及客户端可以自行将Date字段添加到接收到的响应头中去（正如RFC 2068中规定的一样），缓存机制将会正常工作。ETag或 Content-Location，假如同样的请求本应返回200响应。Expires, Cache-Control，和/或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。假如本响应请求使用了强缓存验证，那么本次响应不应该包含其他实体头；否则（例如，某个带条件的 GET 请求使用了弱缓存验证），本次响应禁止包含其他实体头；这避免了缓存了的实体内容和更新了的实体头信息之间的不一致。假如某个304响应指明了当前某个实体没有缓存，那么缓存系统必须忽视这个响应，并且重复发送不包含限制条件的请求。假如接收到一个要求更新某个缓存条目的304响应，那么缓存系统必须更新整个条目以反映所有在响应中被更新的字段的值\r\n    USE_PROXY: 305,  //被请求的资源必须通过指定的代理才能被访问。Location域中将给出指定的代理所在的URI信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果\r\n    UNUSED: 306,  //在最新版的规范中，306状态码已经不再被使用\r\n    TEMPORARY_REDIRECT: 307,  //请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。新的临时性的URI 应当在响应的Location域中返回。除非这是一个HEAD请求，否则响应的实体中应当包含指向新的URI 的超链接及简短说明。因为部分浏览器不能识别307响应，因此需要添加上述必要信息以便用户能够理解并向新的 URI 发出访问请求。如果这不是一个GET或者HEAD请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化\r\n\r\n    BAD_REQUEST: 400,  //1.语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求 2.请求参数有误\r\n    UNAUTHORIZED: 401,  //当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617\r\n    PAYMENT_REQUIRED: 402,  //该状态码是为了将来可能的需求而预留的\r\n    FORBIDDEN: 403,  //服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个HEAD请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息\r\n    NOT_FOUND: 404,  //请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下\r\n    METHOD_NOT_ALLOWED: 405,  //请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。鉴于PUT，DELETE方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误\r\n    NO_ACCEPTABLE: 406,  //请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。除非这是一个 HEAD 请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由Content-Type头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准\r\n    PROXY_AUTHENTICATION_REQUIRED: 407,  //与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个Proxy-Authenticate用以进行身份询问。客户端可以返回一个Proxy-Authorization信息头用以验证。参见RFC 2617\r\n    REQUEST_TIMEOUT: 408,  //请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改\r\n    CONFLICT: 409,  //由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。冲突通常发生于对PUT请求的处理中。例如，在采用版本检查的环境下，某次PUT提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本\r\n    GONE: 410,  //被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为'410 Gone'，以及是否需要保持此标记多长时间，完全取决于服务器拥有者\r\n    LENGTH_REQUIRED: 411,  //服务器拒绝在没有定义Content-Length头的情况下接受请求。在添加了表明请求消息体长度的有效Content-Length头之后，客户端可以再次提交该请求 \r\n    PRECONDITION_FAILED: 412,  //服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上\r\n    REQUEST_ENTITY_TOO_LARGE: 413,  //服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试\r\n    REQUEST_URI_TOO_LONG: 414,  //请求的URI长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括：本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。重定向URI “黑洞”，例如每次重定向把旧的URI作为新的URI的一部分，导致在若干次重定向后URI超长。客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的URI，当GET后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行[1]。没有此类漏洞的服务器，应当返回414状态码\r\n    UNSUPPORTED_MEDIA_TYPE: 415,  //对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝\r\n    REQUESTED_RANGE_NOT_SATISFIABLE: 416,  //如果请求中包含了Range请求头，并且Range中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义If-Range请求头，那么服务器就应当返回416状态码。假如Range使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个Content-Range实体头，用以指明当前资源的长度。这个响应也被禁止使用multipart/byteranges作为其 Content-Type\r\n    EXPECTION_FAILED: 417,  //在请求头Expect中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect的内容无法被满足\r\n    TOO_MANY_CONNECTIONS: 421,  //从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户\r\n    UNPROCESSABLE_ENTITY: 422,  //请求格式正确，但是由于含有语义错误，无法响应\r\n    FAILED_DEPENDENCY: 424,  //由于之前的某个请求发生的错误，导致当前请求失败，例如PROPPATCH\r\n    UNORDERED_COLLECTION: 425,  //在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中\r\n    UPGRADE_REQUIRED: 426,  //客户端应当切换到TLS/1.0\r\n    RETRY_WITH: 449,  //由微软扩展，代表请求应当在执行完适当的操作后进行重试\r\n\r\n    INTERNAL_SERVER_ERROR: 500,  //服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现\r\n    NOT_IMPLEMENTED: 501, //服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求\r\n    BAD_GATEWAY: 502, //作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应\r\n    SERVICE_UNAVAILABLE: 503,  //由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接\r\n    GATEWAY_TIMEOUT: 504,  //作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。注意：某些代理服务器在DNS查询超时时会返回400或者500错误\r\n    HTTP_VERSION_NOT_SUPPORTED: 505,  //服务器不支持，或者拒绝支持在请求中使用的HTTP版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体\r\n    VARIANT_ALSO_NEGOTIATES: 506,  //服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点\r\n    INSUFFICIENT_STORAGE: 507,  //服务器无法存储完成请求所必须的内容。这个状况被认为是临时的\r\n    BANDWIDTH_LIMIT_EXCEEDED: 509,  //服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用\r\n    NOT_EXTENDED: 510  //获取资源所需要的策略并没有没满足\r\n\r\n};","import path from 'path';\r\n\r\nimport fs from 'fs-extra';\r\nimport yaml from 'yaml';\r\nimport _ from 'lodash';\r\n\r\nimport environment from '../environment.ts';\r\n\r\nconst CONFIG_PATH = path.join(path.resolve(), 'configs/', environment.env, \"/system.yml\");\r\n\r\n/**\r\n * 系统配置\r\n */\r\nexport class SystemConfig {\r\n\r\n    /** 是否开启请求日志 */\r\n    requestLog: boolean;\r\n    /** 临时目录路径 */\r\n    tmpDir: string;\r\n    /** 日志目录路径 */\r\n    logDir: string;\r\n    /** 日志写入间隔（毫秒） */\r\n    logWriteInterval: number;\r\n    /** 日志文件有效期（毫秒） */\r\n    logFileExpires: number;\r\n    /** 公共目录路径 */\r\n    publicDir: string;\r\n    /** 临时文件有效期（毫秒） */\r\n    tmpFileExpires: number;\r\n    /** 请求体配置 */\r\n    requestBody: any;\r\n    /** 是否调试模式 */\r\n    debug: boolean;\r\n\r\n    constructor(options?: any) {\r\n        const { requestLog, tmpDir, logDir, logWriteInterval, logFileExpires, publicDir, tmpFileExpires, requestBody, debug } = options || {};\r\n        this.requestLog = _.defaultTo(requestLog, false);\r\n        this.tmpDir = _.defaultTo(tmpDir, './tmp');\r\n        this.logDir = _.defaultTo(logDir, './logs');\r\n        this.logWriteInterval = _.defaultTo(logWriteInterval, 200);\r\n        this.logFileExpires = _.defaultTo(logFileExpires, 2626560000);\r\n        this.publicDir = _.defaultTo(publicDir, './public');\r\n        this.tmpFileExpires = _.defaultTo(tmpFileExpires, 86400000);\r\n        this.requestBody = Object.assign(requestBody || {}, {\r\n            enableTypes: ['json', 'form', 'text', 'xml'],\r\n            encoding: 'utf-8',\r\n            formLimit: '10mb',\r\n            jsonLimit: '10mb',\r\n            textLimit: '10mb',\r\n            xmlLimit: '10mb',\r\n            formidable: {\r\n                maxFileSize: '30mb'\r\n            },\r\n            multipart: true,\r\n            parsedMethods: ['POST', 'PUT', 'PATCH']\r\n        });\r\n        this.debug = _.defaultTo(debug, true);\r\n    }\r\n\r\n    get rootDirPath() {\r\n        return path.resolve();\r\n    }\r\n\r\n    get tmpDirPath() {\r\n        return path.resolve(this.tmpDir);\r\n    }\r\n\r\n    get logDirPath() {\r\n        return path.resolve(this.logDir);\r\n    }\r\n\r\n    get publicDirPath() {\r\n        return path.resolve(this.publicDir);\r\n    }\r\n\r\n    static load() {\r\n        if (!fs.pathExistsSync(CONFIG_PATH)) return new SystemConfig();\r\n        const data = yaml.parse(fs.readFileSync(CONFIG_PATH).toString());\r\n        return new SystemConfig(data);\r\n    }\r\n\r\n}\r\n\r\nexport default SystemConfig.load();","import path from 'path';\r\n\r\nimport fs from 'fs-extra';\r\nimport yaml from 'yaml';\r\nimport _ from 'lodash';\r\n\r\nimport environment from '@/lib/environment.ts';\r\n\r\nconst CONFIG_PATH = path.join(path.resolve(), 'configs/', environment.env, \"/api.yml\");\r\n\r\nexport interface ProxyAgent {\r\n    enable?: boolean;\r\n    protocol?: string;\r\n    host?: string;\r\n    port?: number;\r\n}\r\n\r\nexport class ChatCompletionConfig {\r\n\r\n    /** 驱动名称 */\r\n    driver: string;\r\n    /** 调用地址 */\r\n    url: string;\r\n    /** API密钥 */\r\n    apiKey: string;\r\n    /** API版本号 */\r\n    apiVersion: string;\r\n    /** 模型名称 */\r\n    model: string;\r\n    /** 上下文长度 */\r\n    contextLength: number;\r\n    /** 并行请求数 */\r\n    concurrencyLimit: number;\r\n    /** 等待响应超时时间（毫秒） */\r\n    waitReponseTimeout: number;\r\n    /** 网络代理 */\r\n    proxyAgent: ProxyAgent | null;\r\n\r\n    constructor(options?: any) {\r\n        const { driver, url, apiKey, apiVersion, model, contextLength, concurrencyLimit, waitReponseTimeout, proxyAgent } = options || {};\r\n        this.driver = _.defaultTo(driver, 'zhipuai');\r\n        this.url = _.defaultTo(url, 'https://open.bigmodel.cn/api/paas/v4/chat/completions');\r\n        this.apiKey = _.defaultTo(apiKey, '');\r\n        this.apiVersion = _.defaultTo(apiVersion, '');\r\n        this.model = _.defaultTo(model, 'glm-4');\r\n        this.contextLength = _.defaultTo(contextLength, 131072);\r\n        this.concurrencyLimit = _.defaultTo(concurrencyLimit, 100);\r\n        this.waitReponseTimeout = _.defaultTo(waitReponseTimeout, 30000);\r\n        this.proxyAgent = _.defaultTo(proxyAgent, null);\r\n    }\r\n\r\n    static create(value) {\r\n        return ChatCompletionConfig.isInstance(value) ? value : new ChatCompletionConfig(value);\r\n    }\r\n\r\n    static isInstance(value) {\r\n        return value instanceof ChatCompletionConfig;\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * API配置\r\n */\r\nexport class APIConfig {\r\n\r\n    /** 聊天补全配置 */\r\n    chatCompletion: ChatCompletionConfig;\r\n\r\n    constructor(options?: any) {\r\n        const { chatCompletion } = options || {};\r\n        this.chatCompletion = ChatCompletionConfig.create(chatCompletion);\r\n    }\r\n\r\n    static load() {\r\n        if(!fs.pathExistsSync(CONFIG_PATH)) return new APIConfig();\r\n        const data = yaml.parse(fs.readFileSync(CONFIG_PATH).toString());\r\n        return new APIConfig(data);\r\n    }\r\n\r\n}\r\n\r\nexport default APIConfig.load();","import path from 'path';\r\n\r\nimport fs from 'fs-extra';\r\nimport yaml from 'yaml';\r\nimport _ from 'lodash';\r\n\r\nimport environment from '../environment.ts';\r\n\r\nconst CONFIG_PATH = path.join(path.resolve(), 'configs/', environment.env, \"/redis.yml\");\r\n\r\n/**\r\n * Redis配置\r\n */\r\nexport class RedisConfig {\r\n\r\n    /** Redis主机地址 */\r\n    host: string;\r\n    /** Redis主机端口号 */\r\n    port: number;\r\n    /** Redis服务密码 */\r\n    password?: string;\r\n    /** Redis主节点名称 */\r\n    name?: string;\r\n    /** Redis哨兵节点设置 */\r\n    sentinels?: any[];\r\n    /** 是否懒链接 */\r\n    lazyConnect: boolean;\r\n    /** 哨兵重试超时时间 */\r\n    sentinelRetryTimeout?: number;\r\n    /** 连接数据库序号 */\r\n    db: number;\r\n\r\n    constructor(options?: any) {\r\n        console.log('啊啊啊啊');\r\n        const { host, port, password, name, sentinels, lazyConnect, sentinelRetryTimeout, db } = options || {};\r\n        this.host = _.defaultTo(host, '127.0.0.1');\r\n        this.port = _.defaultTo(port, 6379);\r\n        this.password = password;\r\n        this.name = name;\r\n        this.sentinels = sentinels;\r\n        this.lazyConnect = _.defaultTo(lazyConnect, false);\r\n        this.sentinelRetryTimeout = _.defaultTo(sentinelRetryTimeout, 100);\r\n        this.db = _.defaultTo(db, 0);\r\n    }\r\n\r\n    static load() {\r\n        if(!fs.pathExistsSync(CONFIG_PATH)) return new RedisConfig();\r\n        const data = yaml.parse(fs.readFileSync(CONFIG_PATH).toString());\r\n        console.log(data, '啊啊');\r\n        return new RedisConfig(data);\r\n    }\r\n\r\n}\r\n\r\nexport default RedisConfig.load();","import serviceConfig from \"./configs/service-config.ts\";\r\nimport systemConfig from \"./configs/system-config.ts\";\r\nimport apiConfig from \"./configs/api-config.ts\";\r\nimport redisConfig from \"./configs/redis-config.ts\";\r\n\r\nclass Config {\r\n    \r\n    /** 服务配置 */\r\n    service = serviceConfig;\r\n    /** 系统配置 */\r\n    system = systemConfig;\r\n    /** API配置 */\r\n    api = apiConfig;\r\n    /** Redis配置 */\r\n    redis = redisConfig;\r\n\r\n}\r\n\r\nexport default new Config();","import path from 'path';\r\nimport _util from 'util';\r\n\r\nimport 'colors';\r\nimport _ from 'lodash';\r\nimport fs from 'fs-extra';\r\nimport { format as dateFormat } from 'date-fns';\r\n\r\nimport config from './config.ts';\r\nimport util from './util.ts';\r\n\r\nclass LogWriter {\r\n\r\n    #buffers = [];\r\n\r\n    constructor() {\r\n        fs.ensureDirSync(config.system.logDirPath);\r\n        this.work();\r\n    }\r\n\r\n    push(content) {\r\n        const buffer = Buffer.from(content);\r\n        this.#buffers.push(buffer);\r\n    }\r\n\r\n    writeSync(buffer) {\r\n        fs.appendFileSync(path.join(config.system.logDirPath, `/${util.getDateString()}.log`), buffer);\r\n    }\r\n\r\n    async write(buffer) {\r\n        await fs.appendFile(path.join(config.system.logDirPath, `/${util.getDateString()}.log`), buffer);\r\n    }\r\n\r\n    flush() {\r\n        if(!this.#buffers.length) return;\r\n        fs.appendFileSync(path.join(config.system.logDirPath, `/${util.getDateString()}.log`), Buffer.concat(this.#buffers));\r\n    }\r\n\r\n    work() {\r\n        if (!this.#buffers.length) return setTimeout(this.work.bind(this), config.system.logWriteInterval);\r\n        const buffer = Buffer.concat(this.#buffers);\r\n        this.#buffers = [];\r\n        this.write(buffer)\r\n        .finally(() => setTimeout(this.work.bind(this), config.system.logWriteInterval))\r\n        .catch(err => console.error(\"Log write error:\", err));\r\n    }\r\n\r\n}\r\n\r\nclass LogText {\r\n\r\n    /** @type {string} 日志级别 */\r\n    level;\r\n    /** @type {string} 日志文本 */\r\n    text;\r\n    /** @type {string} 日志来源 */\r\n    source;\r\n    /** @type {Date} 日志发生时间 */\r\n    time = new Date();\r\n\r\n    constructor(level, ...params) {\r\n        this.level = level;\r\n        this.text = _util.format.apply(null, params);\r\n        this.source = this.#getStackTopCodeInfo();\r\n    }\r\n\r\n    #getStackTopCodeInfo() {\r\n        const unknownInfo = { name: \"unknown\", codeLine: 0, codeColumn: 0 };\r\n        const stackArray = new Error().stack.split(\"\\n\");\r\n        const text = stackArray[4];\r\n        if (!text)\r\n            return unknownInfo;\r\n        const match = text.match(/at (.+) \\((.+)\\)/) || text.match(/at (.+)/);\r\n        if (!match || !_.isString(match[2] || match[1]))\r\n            return unknownInfo;\r\n        const temp = match[2] || match[1];\r\n        const _match = temp.match(/([a-zA-Z0-9_\\-\\.]+)\\:(\\d+)\\:(\\d+)$/);\r\n        if (!_match)\r\n            return unknownInfo;\r\n        const [, scriptPath, codeLine, codeColumn] = _match as any;\r\n        return {\r\n            name: scriptPath ? scriptPath.replace(/.js$/, \"\") : \"unknown\",\r\n            path: scriptPath || null,\r\n            codeLine: parseInt(codeLine || 0),\r\n            codeColumn: parseInt(codeColumn || 0)\r\n        };\r\n    }\r\n\r\n    toString() {\r\n        return `[${dateFormat(this.time, \"yyyy-MM-dd HH:mm:ss.SSS\")}][${this.level}][${this.source.name}<${this.source.codeLine},${this.source.codeColumn}>] ${this.text}`;\r\n    }\r\n\r\n}\r\n\r\nclass Logger {\r\n\r\n    /** @type {Object} 系统配置 */\r\n    config = {};\r\n    /** @type {Object} 日志级别映射 */\r\n    static Level = {\r\n        Success: \"success\",\r\n        Info: \"info\",\r\n        Log: \"log\",\r\n        Debug: \"debug\",\r\n        Warning: \"warning\",\r\n        Error: \"error\",\r\n        Fatal: \"fatal\"\r\n    };\r\n    /** @type {Object} 日志级别文本颜色樱色 */\r\n    static LevelColor = {\r\n        [Logger.Level.Success]: \"green\",\r\n        [Logger.Level.Info]: \"brightCyan\",\r\n        [Logger.Level.Debug]: \"white\",\r\n        [Logger.Level.Warning]: \"brightYellow\",\r\n        [Logger.Level.Error]: \"brightRed\",\r\n        [Logger.Level.Fatal]: \"red\"\r\n    };\r\n    #writer;\r\n\r\n    constructor() {\r\n        this.#writer = new LogWriter();\r\n    }\r\n\r\n    header() {\r\n        this.#writer.writeSync(Buffer.from(`\\n\\n===================== LOG START ${dateFormat(new Date(), \"yyyy-MM-dd HH:mm:ss.SSS\")} =====================\\n\\n`));\r\n    }\r\n\r\n    footer() {\r\n        this.#writer.flush();  //将未写入文件的日志缓存写入\r\n        this.#writer.writeSync(Buffer.from(`\\n\\n===================== LOG END ${dateFormat(new Date(), \"yyyy-MM-dd HH:mm:ss.SSS\")} =====================\\n\\n`));\r\n    }\r\n\r\n    success(...params) {\r\n        const content = new LogText(Logger.Level.Success, ...params).toString();\r\n        console.info(content[Logger.LevelColor[Logger.Level.Success]]);\r\n        this.#writer.push(content + \"\\n\");\r\n    }\r\n\r\n    info(...params) {\r\n        const content = new LogText(Logger.Level.Info, ...params).toString();\r\n        console.info(content[Logger.LevelColor[Logger.Level.Info]]);\r\n        this.#writer.push(content + \"\\n\");\r\n    }\r\n\r\n    log(...params) {\r\n        const content = new LogText(Logger.Level.Log, ...params).toString();\r\n        console.log(content[Logger.LevelColor[Logger.Level.Log]]);\r\n        this.#writer.push(content + \"\\n\");\r\n    }\r\n\r\n    debug(...params) {\r\n        if(!config.system.debug) return;  //非调试模式忽略debug\r\n        const content = new LogText(Logger.Level.Debug, ...params).toString();\r\n        console.debug(content[Logger.LevelColor[Logger.Level.Debug]]);\r\n        this.#writer.push(content + \"\\n\");\r\n    }\r\n\r\n    warn(...params) {\r\n        const content = new LogText(Logger.Level.Warning, ...params).toString();\r\n        console.warn(content[Logger.LevelColor[Logger.Level.Warning]]);\r\n        this.#writer.push(content + \"\\n\");\r\n    }\r\n\r\n    error(...params) {\r\n        const content = new LogText(Logger.Level.Error, ...params).toString();\r\n        console.error(content[Logger.LevelColor[Logger.Level.Error]]);\r\n        this.#writer.push(content);\r\n    }\r\n\r\n    fatal(...params) {\r\n        const content = new LogText(Logger.Level.Fatal, ...params).toString();\r\n        console.error(content[Logger.LevelColor[Logger.Level.Fatal]]);\r\n        this.#writer.push(content);\r\n    }\r\n\r\n    destory() {\r\n        this.#writer.destory();\r\n    }\r\n\r\n}\r\n\r\nexport default new Logger();","import logger from './logger.js';\r\n\r\n// 允许无限量的监听器\r\nprocess.setMaxListeners(Infinity);\r\n// 输出未捕获异常\r\nprocess.on(\"uncaughtException\", (err, origin) => {\r\n    logger.error(`An unhandled error occurred: ${origin}`, err);\r\n});\r\n// 输出未处理的Promise.reject\r\nprocess.on(\"unhandledRejection\", (_, promise) => {\r\n    promise.catch(err => logger.error(\"An unhandled rejection occurred:\", err));\r\n});\r\n// 输出系统警告信息\r\nprocess.on(\"warning\", warning => logger.warn(\"System warning: \", warning));\r\n// 进程退出监听\r\nprocess.on(\"exit\", () => {\r\n    logger.info(\"Service exit\");\r\n    logger.footer();\r\n});\r\n// 进程被kill\r\nprocess.on(\"SIGTERM\", () => {\r\n    logger.warn(\"received kill signal\");\r\n    process.exit(2);\r\n});\r\n// Ctrl-C进程退出\r\nprocess.on(\"SIGINT\", () => {\r\n    process.exit(0);\r\n});","import Koa from 'koa';\r\nimport KoaRouter from 'koa-router';\r\nimport koaRange from 'koa-range';\r\nimport koaCors from \"koa2-cors\";\r\nimport koaBody from 'koa-body';\r\nimport _ from 'lodash';\r\n\r\nimport Exception from './exceptions/Exception.ts';\r\nimport Request from './request/Request.ts';\r\nimport Response from './response/Response.js';\r\nimport FailureBody from './response/FailureBody.ts';\r\nimport EX from './consts/exceptions.ts';\r\nimport logger from './logger.ts';\r\nimport config from './config.ts';\r\n\r\nclass Server {\r\n\r\n    app;\r\n    router;\r\n    \r\n    constructor() {\r\n        this.app = new Koa();\r\n        this.app.use(koaCors());\r\n        // 范围请求支持\r\n        this.app.use(koaRange);\r\n        this.router = new KoaRouter({ prefix: config.service.urlPrefix });\r\n        // 前置处理异常拦截\r\n        this.app.use(async (ctx: any, next: Function) => {\r\n            if(ctx.request.type === \"application/xml\" || ctx.request.type === \"application/ssml+xml\")\r\n                ctx.req.headers[\"content-type\"] = \"text/xml\";\r\n            try { await next() }\r\n            catch (err) {\r\n                logger.error(err);\r\n                const failureBody = new FailureBody(err);\r\n                new Response(failureBody).injectTo(ctx);\r\n            }\r\n        });\r\n        // 载荷解析器支持\r\n        this.app.use(koaBody(_.clone(config.system.requestBody)));\r\n        this.app.on(\"error\", (err: any) => {\r\n            // 忽略连接重试、中断、管道、取消错误\r\n            if ([\"ECONNRESET\", \"ECONNABORTED\", \"EPIPE\", \"ECANCELED\"].includes(err.code)) return;\r\n            logger.error(err);\r\n        });\r\n        logger.success(\"Server initialized\");\r\n    }\r\n\r\n    /**\r\n     * 附加路由\r\n     * \r\n     * @param routes 路由列表\r\n     */\r\n    attachRoutes(routes: any[]) {\r\n        routes.forEach((route: any) => {\r\n            const prefix = route.prefix || \"\";\r\n            for (let method in route) {\r\n                if(method === \"prefix\") continue;\r\n                if (!_.isObject(route[method])) {\r\n                    logger.warn(`Router ${prefix} ${method} invalid`);\r\n                    continue;\r\n                }\r\n                for (let uri in route[method]) {\r\n                    this.router[method](`${prefix}${uri}`, async ctx => {\r\n                        const { request, response } = await this.#requestProcessing(ctx, route[method][uri]);\r\n                        if(response != null && config.system.requestLog)\r\n                            logger.info(`<- ${request.method} ${request.url} ${response.time - request.time}ms`);\r\n                    });\r\n                }\r\n            }\r\n            logger.info(`Route ${config.service.urlPrefix || \"\"}${prefix} attached`);\r\n        });\r\n        this.app.use(this.router.routes());\r\n        this.app.use((ctx: any) => {\r\n            const request = new Request(ctx);\r\n            logger.debug(`-> ${ctx.request.method} ${ctx.request.url} request is not supported - ${request.remoteIP || \"unknown\"}`);\r\n            const failureBody = new FailureBody(new Exception(EX.SYSTEM_NOT_ROUTE_MATCHING, \"Request is not supported\"));\r\n            const response = new Response(failureBody);\r\n            response.injectTo(ctx);\r\n            if(config.system.requestLog)\r\n                logger.info(`<- ${request.method} ${request.url} ${response.time - request.time}ms`);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 请求处理\r\n     * \r\n     * @param ctx 上下文\r\n     * @param routeFn 路由方法\r\n     */\r\n    #requestProcessing(ctx: any, routeFn: Function): Promise<any> {\r\n        return new Promise(resolve => {\r\n            const request = new Request(ctx);\r\n            try {\r\n                if(config.system.requestLog)\r\n                    logger.info(`-> ${request.method} ${request.url}`);\r\n                    routeFn(request)\r\n                .then(response => {\r\n                    try {\r\n                        if(!Response.isInstance(response)) {\r\n                            const _response = new Response(response);\r\n                            _response.injectTo(ctx);\r\n                            return resolve({ request, response: _response });\r\n                        }\r\n                        response.injectTo(ctx);\r\n                        resolve({ request, response });\r\n                    }\r\n                    catch(err) {\r\n                        logger.error(err);\r\n                        const failureBody = new FailureBody(err);\r\n                        const response = new Response(failureBody);\r\n                        response.injectTo(ctx);\r\n                        resolve({ request, response });\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    try {\r\n                        logger.error(err);\r\n                        const failureBody = new FailureBody(err);\r\n                        const response = new Response(failureBody);\r\n                        response.injectTo(ctx);\r\n                        resolve({ request, response });\r\n                    }\r\n                    catch(err) {\r\n                        logger.error(err);\r\n                        const failureBody = new FailureBody(err);\r\n                        const response = new Response(failureBody);\r\n                        response.injectTo(ctx);\r\n                        resolve({ request, response });\r\n                    }\r\n                });\r\n            }\r\n            catch(err) {\r\n                logger.error(err);\r\n                const failureBody = new FailureBody(err);\r\n                const response = new Response(failureBody);\r\n                response.injectTo(ctx);\r\n                resolve({ request, response });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 监听端口\r\n     */\r\n    async listen() {\r\n        const host = config.service.host;\r\n        const port = config.service.port;\r\n        await Promise.all([\r\n            new Promise((resolve, reject) => {\r\n                if(host === \"0.0.0.0\" || host === \"localhost\" || host === \"127.0.0.1\")\r\n                    return resolve(null);\r\n                this.app.listen(port, \"localhost\", err => {\r\n                    if(err) return reject(err);\r\n                    resolve(null);\r\n                });\r\n            }),\r\n            new Promise((resolve, reject) => {\r\n                this.app.listen(port, host, err => {\r\n                    if(err) return reject(err);\r\n                    resolve(null);\r\n                });\r\n            })\r\n        ]);\r\n        logger.success(`Server listening on port ${port} (${host})`);\r\n    }\r\n\r\n}\r\n\r\nexport default new Server();","import assert from 'assert';\r\n\r\nimport _ from 'lodash';\r\n\r\nexport default class Exception extends Error {\r\n\r\n    /** 错误码 */\r\n    errcode: number;\r\n    /** 错误消息 */\r\n    errmsg: string;\r\n    /** 数据 */\r\n    data: any;\r\n    /** HTTP状态码 */\r\n    httpStatusCode: number;\r\n\r\n    /**\r\n     * 构造异常\r\n     * \r\n     * @param exception 异常\r\n     * @param _errmsg 异常消息\r\n     */\r\n    constructor(exception: (string | number)[], _errmsg?: string) {\r\n        assert(_.isArray(exception), 'Exception must be Array');\r\n        const [errcode, errmsg] = exception as [number, string];\r\n        assert(_.isFinite(errcode), 'Exception errcode invalid');\r\n        assert(_.isString(errmsg), 'Exception errmsg invalid');\r\n        super(_errmsg || errmsg);\r\n        this.errcode = errcode;\r\n        this.errmsg = _errmsg || errmsg;\r\n    }\r\n\r\n    setHTTPStatusCode(value: number) {\r\n        this.httpStatusCode = value;\r\n        return this;\r\n    }\r\n\r\n    setData(value: any) {\r\n        this.data = _.defaultTo(value, null);\r\n        return this;\r\n    }\r\n\r\n}","import _ from 'lodash';\r\n\r\nimport APIException from '@/lib/exceptions/APIException.ts';\r\nimport EX from '@/api/consts/exceptions.ts';\r\nimport logger from '@/lib/logger.ts';\r\nimport util from '@/lib/util.ts';\r\n\r\nexport interface RequestOptions {\r\n    time?: number;\r\n}\r\n\r\nexport default class Request {\r\n\r\n    /** 请求方法 */\r\n    method: string;\r\n    /** 请求URL */\r\n    url: string;\r\n    /** 请求路径 */\r\n    path: string;\r\n    /** 请求载荷类型 */\r\n    type: string;\r\n    /** 请求headers */\r\n    headers: any;\r\n    /** 请求原始查询字符串 */\r\n    search: string;\r\n    /** 请求查询参数 */\r\n    query: any;\r\n    /** 请求URL参数 */\r\n    params: any;\r\n    /** 请求载荷 */\r\n    body: any;\r\n    /** 上传的文件 */\r\n    files: any[];\r\n    /** 客户端IP地址 */\r\n    remoteIP: string | null;\r\n    /** 请求接受时间戳（毫秒） */\r\n    time: number;\r\n\r\n    constructor(ctx, options: RequestOptions = {}) {\r\n        const { time } = options;\r\n        this.method = ctx.request.method;\r\n        this.url = ctx.request.url;\r\n        this.path = ctx.request.path;\r\n        this.type = ctx.request.type;\r\n        this.headers = ctx.request.headers || {};\r\n        this.search = ctx.request.search;\r\n        this.query = ctx.query || {};\r\n        this.params = ctx.params || {};\r\n        this.body = ctx.request.body || {};\r\n        this.files = ctx.request.files || {};\r\n        this.remoteIP = this.headers[\"X-Real-IP\"] || this.headers[\"x-real-ip\"] || this.headers[\"X-Forwarded-For\"] || this.headers[\"x-forwarded-for\"] || ctx.ip || null;\r\n        this.time = Number(_.defaultTo(time, util.timestamp()));\r\n    }\r\n\r\n    validate(key: string, fn?: Function) {\r\n        try {\r\n            const value = _.get(this, key);\r\n            if (fn) {\r\n                if (fn(value) === false)\r\n                    throw `[Mismatch] -> ${fn}`;\r\n            }\r\n            else if (_.isUndefined(value))\r\n                throw '[Undefined]';\r\n        }\r\n        catch (err) {\r\n            logger.warn(`Params ${key} invalid:`, err);\r\n            throw new APIException(EX.API_REQUEST_PARAMS_INVALID, `Params ${key} invalid`);\r\n        }\r\n    }\r\n\r\n}","import Exception from './Exception.js';\r\n\r\nexport default class APIException extends Exception {\r\n\r\n    /**\r\n     * 构造异常\r\n     * \r\n     * @param {[number, string]} exception 异常\r\n     */\r\n    constructor(exception: (string | number)[], errmsg?: string) {\r\n        super(exception, errmsg);\r\n    }\r\n\r\n}","export default {\r\n    API_TEST: [-9999, 'API异常错误'],\r\n    API_TICKET_EXPIRED: [-2000, '凭证已过期'],\r\n    API_REQUEST_HAS_BLOCKED: [-2001, '请求已被阻止'],\r\n    API_REQUEST_PARAMS_INVALID: [-2002, '请求参数非法']\r\n}","import mime from 'mime';\r\nimport _ from 'lodash';\r\n\r\nimport Body from './Body.ts';\r\nimport util from '../util.ts';\r\n\r\nexport interface ResponseOptions {\r\n    statusCode?: number;\r\n    type?: string;\r\n    headers?: Record<string, any>;\r\n    redirect?: string;\r\n    body?: any;\r\n    size?: number;\r\n    time?: number;\r\n}\r\n\r\nexport default class Response {\r\n\r\n    /** 响应HTTP状态码 */\r\n    statusCode: number;\r\n    /** 响应内容类型 */\r\n    type: string;\r\n    /** 响应headers */\r\n    headers: Record<string, any>;\r\n    /** 重定向目标 */\r\n    redirect: string;\r\n    /** 响应载荷 */\r\n    body: any;\r\n    /** 响应载荷大小 */\r\n    size: number;\r\n    /** 响应时间戳 */\r\n    time: number;\r\n\r\n    constructor(body: any, options: ResponseOptions = {}) {\r\n        const { statusCode, type, headers, redirect, size, time } = options;\r\n        this.statusCode = Number(_.defaultTo(statusCode, Body.isInstance(body) ? body.statusCode : undefined))\r\n        this.type = type;\r\n        this.headers = headers;\r\n        this.redirect = redirect;\r\n        this.size = size;\r\n        this.time = Number(_.defaultTo(time, util.timestamp()));\r\n        this.body = body;\r\n    }\r\n\r\n    injectTo(ctx) {\r\n        this.redirect && ctx.redirect(this.redirect);\r\n        this.statusCode && (ctx.status = this.statusCode);\r\n        this.type && (ctx.type = mime.getType(this.type) || this.type);\r\n        const headers = this.headers || {};\r\n        if(this.size && !headers[\"Content-Length\"] && !headers[\"content-length\"])\r\n            headers[\"Content-Length\"] = this.size;\r\n        ctx.set(headers);\r\n        if(Body.isInstance(this.body))\r\n            ctx.body = this.body.toObject();\r\n        else\r\n            ctx.body = this.body;\r\n    }\r\n\r\n    static isInstance(value) {\r\n        return value instanceof Response;\r\n    }\r\n\r\n}","import  _ from 'lodash';\r\n\r\nexport interface BodyOptions {\r\n    code?: number;\r\n    message?: string;\r\n    data?: any;\r\n    statusCode?: number;\r\n}\r\n\r\nexport default class Body {\r\n\r\n    /** 状态码 */\r\n    code: number;\r\n    /** 状态消息 */\r\n    message: string;\r\n    /** 载荷 */\r\n    data: any;\r\n    /** HTTP状态码 */\r\n    statusCode: number;\r\n\r\n    constructor(options: BodyOptions = {}) {\r\n        const { code, message, data, statusCode } = options;\r\n        this.code = Number(_.defaultTo(code, 0));\r\n        this.message = _.defaultTo(message, 'OK');\r\n        this.data = _.defaultTo(data, null);\r\n        this.statusCode = Number(_.defaultTo(statusCode, 200));\r\n    }\r\n\r\n    toObject() {\r\n        return {\r\n            code: this.code,\r\n            message: this.message,\r\n            data: this.data\r\n        };\r\n    }\r\n\r\n    static isInstance(value) {\r\n        return value instanceof Body;\r\n    }\r\n\r\n}","import _ from 'lodash';\r\n\r\nimport Body from './Body.ts';\r\nimport Exception from '../exceptions/Exception.ts';\r\nimport APIException from '../exceptions/APIException.ts';\r\nimport EX from '../consts/exceptions.ts';\r\nimport HTTP_STATUS_CODES from '../http-status-codes.ts';\r\n\r\nexport default class FailureBody extends Body {\r\n    \r\n    constructor(error: APIException | Exception | Error, _data?: any) {\r\n        let errcode, errmsg, data = _data, httpStatusCode = HTTP_STATUS_CODES.OK;;\r\n        if(_.isString(error))\r\n            error = new Exception(EX.SYSTEM_ERROR, error);\r\n        else if(error instanceof APIException || error instanceof Exception)\r\n            ({ errcode, errmsg, data, httpStatusCode } = error);\r\n        else if(_.isError(error))\r\n            error = new Exception(EX.SYSTEM_ERROR, error.message);\r\n        super({\r\n            code: errcode || -1,\r\n            message: errmsg || 'Internal error',\r\n            data,\r\n            statusCode: httpStatusCode\r\n        });\r\n    }\r\n\r\n    static isInstance(value) {\r\n        return value instanceof FailureBody;\r\n    }\r\n\r\n}","export default {\r\n    SYSTEM_ERROR: [-1000, '系统异常'],\r\n    SYSTEM_REQUEST_VALIDATION_ERROR: [-1001, '请求参数校验错误'],\r\n    SYSTEM_NOT_ROUTE_MATCHING: [-1002, '无匹配的路由']\r\n} as Record<string, [number, string]>","import redis from '@/lib/redis.ts';\r\n\r\nexport default {\r\n\r\n    /**\r\n     * \r\n     * \r\n     * @param {Object} options 选项\r\n     * @param {string} options.username 用户名称\r\n     * @param {string} options.ipAddress IP地址\r\n     */\r\n    create(options = {}) {\r\n        const {  } = options;\r\n    }\r\n\r\n}","import _ from 'lodash';\r\n\r\nimport { Ticket } from '@/api/models/user.ts';\r\nimport EX from '@/api/consts/exceptions.ts';\r\nimport APIException from '@/lib/exceptions/APIException.ts';\r\nimport Request from '@/lib/request/Request.js';\r\nimport redis from '@/lib/redis.ts';\r\nimport logger from '@/lib/logger.ts';\r\nimport util from '@/lib/util.ts';\r\n\r\nconst blockedIPAddresses = [];\r\n\r\nexport default {\r\n\r\n    /**\r\n     * 创建凭据\r\n     * \r\n     * @param {Object} options 选项\r\n     * @param {string} options.username 用户名称\r\n     * @param {string} options.ipAddress IP地址\r\n     */\r\n    async createTicket(options = {}) {\r\n        const { username, ipAddress } = options as any;\r\n        const ticket = new Ticket({\r\n            username,\r\n            ipAddress\r\n        });\r\n        await redis.hmset(`ticket:${ticket.id}`, ticket.toRedisData());\r\n        return ticket;\r\n    },\r\n\r\n    /**\r\n     * 校验凭据\r\n     * \r\n     * @param {Request} request 请求对象\r\n     */\r\n    async checkTicket(request) {\r\n        const ticketId = request.headers['ticket'];\r\n        if(!_.isString(ticketId) || !/^[a-z0-9\\-]{36}$/.test(ticketId))\r\n            throw new APIException(EX.API_TICKET_EXPIRED);\r\n        if(blockedIPAddresses.indexOf(request.remoteIP) != -1)\r\n            throw new APIException(EX.API_REQUEST_HAS_BLOCKED);\r\n        let ticket = new Ticket();\r\n        const data = await redis.hmget(`ticket:${ticketId}`, ...Object.keys(ticket));\r\n        if(data == null)\r\n            throw new APIException(EX.API_TICKET_EXPIRED);\r\n        ticket = Ticket.parseRedisData(data);\r\n        if(request.remoteIP && request.remoteIP != ticket.ipAddress) {\r\n            ticket.oldIPAddresses.push(ticket.ipAddress);\r\n            ticket.ipAddress = request.remoteIP;\r\n            const totalInterval = ticket.ipAddressSwitchTimeIntervals.reduce((total, interval) => total + interval, 0);\r\n            if(ticket.ipAddressSwitchTimeIntervals.length >= 10) {\r\n                const averageInterval = totalInterval / ticket.ipAddressSwitchTimeIntervals.length;\r\n                if(averageInterval < 1800) {\r\n                    [...ticket.oldIPAddresses, ticket.ipAddress].forEach(ip => blockedIPAddresses.push(ip));\r\n                    logger.warn('阻止IP地址名单：', blockedIPAddresses);\r\n                    throw new APIException(EX.API_REQUEST_HAS_BLOCKED);\r\n                }\r\n                ticket.ipAddressSwitchTimeIntervals.shift();\r\n            }\r\n            ticket.ipAddressSwitchTimeIntervals.push(util.unixTimestamp() - (ticket.createTime + totalInterval));\r\n        }\r\n        await redis.hmset(`ticket:${ticket.id}`, ticket.toRedisData());\r\n        return ticket;\r\n    }\r\n\r\n}","import _ from 'lodash';\r\nimport util from '@/lib/util.ts';\r\n\r\nexport class Ticket {\r\n\r\n    /** @type {string} 凭据ID */\r\n    id;\r\n    /** @type {string} 用户名 */\r\n    username;\r\n    /** @type {string} IP地址 */\r\n    ipAddress;\r\n    /** @type {string[]} 旧的IP地址列表 */\r\n    oldIPAddresses;\r\n    /** @type {number[]} IP地址切换时间间隔列表 */\r\n    ipAddressSwitchTimeIntervals;\r\n    /** @type {number} 创建时间 */\r\n    createTime;\r\n\r\n    constructor(options = {}) {\r\n        const { id, username, ipAddress, oldIPAddresses, ipAddressSwitchTimeIntervals, createTime } = options as any;\r\n        this.id = _.defaultTo(id, util.uuid());\r\n        this.username = username;\r\n        this.ipAddress = ipAddress;\r\n        this.oldIPAddresses = _.defaultTo(oldIPAddresses, []);\r\n        this.ipAddressSwitchTimeIntervals = _.defaultTo(ipAddressSwitchTimeIntervals, []);\r\n        this.createTime = _.defaultTo(createTime, util.unixTimestamp());\r\n    }\r\n\r\n    toRedisData() {\r\n        return {\r\n            ...this,\r\n            oldIPAddresses: JSON.stringify(this.oldIPAddresses),\r\n            ipAddressSwitchTimeIntervals: JSON.stringify(this.ipAddressSwitchTimeIntervals),\r\n            createTime: `${this.createTime}`\r\n        }\r\n    }\r\n\r\n    static parseRedisData(value = {}) {\r\n        const { oldIPAddresses, ipAddressSwitchTimeIntervals, createTime } = (value || {}) as any;\r\n        return new Ticket({\r\n            ...value,\r\n            oldIPAddresses: JSON.parse(oldIPAddresses),\r\n            ipAddressSwitchTimeIntervals: JSON.parse(ipAddressSwitchTimeIntervals),\r\n            createTime: Number(createTime)\r\n        });\r\n    }\r\n\r\n}","import { Redis as IORedis } from \"ioredis\";\r\n\r\nimport config from \"./config.ts\";\r\n\r\nclass Redis extends IORedis {\r\n\r\n    constructor() {\r\n        super({\r\n            ...config.redis,\r\n            sentinelRetryStrategy: times => Math.min(times * config.redis.sentinelRetryTimeout || 100, 10000)\r\n        });\r\n    }\r\n\r\n    async hmget(key: string, ...fields: any[]): Promise<any> {\r\n        if(!await super.exists(key))\r\n            return null;\r\n        const values = await super.hmget(key, ...fields);\r\n        return Object.fromEntries(fields.map((field, index) => [field, values[index]]));\r\n    }\r\n\r\n}\r\n\r\nexport default new Redis();","import Request from '@/lib/request/Request.ts';\r\nimport conversation from '@/api/controllers/conversation.ts';\r\nimport user from '@/api/controllers/user.ts';\r\nimport util from '@/lib/util.ts';\r\n\r\nexport default {\r\n    \r\n    prefix: '/conversation',\r\n\r\n    get: {\r\n        \r\n        \r\n    },\r\n\r\n    post: {\r\n\r\n        '/create': async (request: Request) => {\r\n            const ticket = await user.checkTicket(request);\r\n            conversation.create({\r\n                ticketId: ticket.id\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n}","import assert from 'assert';\r\n\r\nimport _ from 'lodash';\r\n\r\nimport Request from '@/lib/request/Request.ts';\r\nimport user from '@/api/controllers/user.ts';\r\n\r\nexport default {\r\n\r\n    prefix: '/user',\r\n\r\n    post: {\r\n        \r\n        '/register': async (request: Request) => {\r\n            const { username } = request.body;\r\n            request.validate('body.username', _.isString);\r\n            const ticket = await user.createTicket({\r\n                username,\r\n                ipAddress: request.remoteIP\r\n            });\r\n            return ticket;\r\n        },\r\n\r\n    }\r\n\r\n}","import conversation from './conversation.ts';\r\nimport user from './user.ts';\r\n\r\nexport default [\r\n    conversation,\r\n    user\r\n];","\"use strict\";\r\n\r\nimport environment from \"@/lib/environment.ts\";\r\nimport config from \"@/lib/config.ts\";\r\nimport \"@/lib/initialize.ts\";\r\nimport server from \"@/lib/server.ts\";\r\nimport routes from \"@/api/routes/index.ts\";\r\nimport logger from \"@/lib/logger.ts\";\r\nimport util from \"@/lib/util.ts\";\r\n\r\nconst startupTime = performance.now();\r\n\r\n(async () => {\r\n  logger.header();\r\n\r\n  util.printLogo();\r\n\r\n  logger.info(\"<<<< save family server >>>>\");\r\n  logger.info(\"Version:\", environment.package.version);\r\n  logger.info(\"Process id:\", process.pid);\r\n  logger.info(\"Environment:\", environment.env);\r\n  logger.info(\"Service name:\", config.service.name);\r\n\r\n  server.attachRoutes(routes);\r\n  await server.listen();\r\n\r\n  config.service.bindAddress &&\r\n    logger.success(\"service bind address:\", config.service.bindAddress);\r\n})()\r\n  .then(() =>\r\n    logger.success(\r\n      `Service startup completed (${Math.floor(performance.now() - startupTime)}ms)`\r\n    )\r\n  )\r\n  .catch((err) => console.error(err));\r\n"],"mappings":"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","names":["minimist","cmdArgs","envVars","_","fs","path","import_path","import_fs_extra","import_lodash","import_path","import_fs_extra","import_lodash","_","uuid","randomstring","mime","path","dateFormat","os","fs","crypto","CRC32","path","_","fs","yaml","import_path","import_fs_extra","import_yaml","import_lodash","CONFIG_PATH","path","_","fs","yaml","import_path","import_fs_extra","import_yaml","import_lodash","CONFIG_PATH","path","_","fs","yaml","import_path","import_fs_extra","import_yaml","import_lodash","CONFIG_PATH","path","_","fs","yaml","import_path","import_util","import_colors","import_lodash","import_fs_extra","import_date_fns","fs","path","_util","_","dateFormat","_","import_lodash","import_lodash","assert","_","import_lodash","_","import_mime","import_lodash","import_lodash","_","_","mime","import_lodash","exceptions_default","_","exceptions_default","Koa","koaCors","koaRange","KoaRouter","koaBody","_","exceptions_default","response","err","import_lodash","import_lodash","_","IORedis","_","conversation_default","import_lodash","user_default","_","conversation_default","user_default"]}